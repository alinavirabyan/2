def knapsack(weights, values, capacity):
    n = len(weights)
    dp = []
    for i in range(n + 1):
        dp.append([0] * (capacity + 1))

    for i in range(1, n + 1):
        for w in range(capacity + 1):
            current_weight = weights[i - 1]
            current_value = values[i - 1]

            if current_weight <= w:
                include = current_value + dp[i - 1][w - current_weight]
                exclude = dp[i - 1][w]
                dp[i][w] = max(include, exclude)
            else:
                dp[i][w] = dp[i - 1][w]

    selected_items = []
    w = capacity
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(i - 1)
            w -= weights[i - 1]

    print("\nDP Table:")
    for row in dp:
        print(row)

    return dp[n][capacity], selected_items

n = int(input("Number of items: "))
weights_input = input("Weights (space-separated): ")
values_input = input("Values (space-separated): ")

weights = []
for num in weights_input.split():
    weights.append(int(num))

values = []
for num in values_input.split():
    values.append(int(num))

capacity = int(input("Knapsack capacity: "))

max_value, selected = knapsack(weights, values, capacity)

print("\nMaximum value:", max_value)
print("Selected item indices (0-based):", selected)
for i in selected:
    print(f"   • Item #{i + 1} — weight: {weights[i]}, value: {values[i]}")
